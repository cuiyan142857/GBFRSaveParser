// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FlatBuffers

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FloatSaveDataUnit struct {
	_tab flatbuffers.Table
}

func GetRootAsFloatSaveDataUnit(buf []byte, offset flatbuffers.UOffsetT) *FloatSaveDataUnit {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FloatSaveDataUnit{}
	x.Init(buf, n+offset)
	return x
}

func FinishFloatSaveDataUnitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFloatSaveDataUnit(buf []byte, offset flatbuffers.UOffsetT) *FloatSaveDataUnit {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FloatSaveDataUnit{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFloatSaveDataUnitBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FloatSaveDataUnit) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FloatSaveDataUnit) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FloatSaveDataUnit) Idtype() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FloatSaveDataUnit) MutateIdtype(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *FloatSaveDataUnit) UnitId() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FloatSaveDataUnit) MutateUnitId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *FloatSaveDataUnit) ValueData(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *FloatSaveDataUnit) ValueDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FloatSaveDataUnit) MutateValueData(j int, n uint64) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateUint64(a+flatbuffers.UOffsetT(j*8), n)
	}
	return false
}

func FloatSaveDataUnitStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FloatSaveDataUnitAddIdtype(builder *flatbuffers.Builder, idtype uint32) {
	builder.PrependUint32Slot(0, idtype, 0)
}
func FloatSaveDataUnitAddUnitId(builder *flatbuffers.Builder, unitId uint32) {
	builder.PrependUint32Slot(1, unitId, 0)
}
func FloatSaveDataUnitAddValueData(builder *flatbuffers.Builder, valueData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(valueData), 0)
}
func FloatSaveDataUnitStartValueDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func FloatSaveDataUnitEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
